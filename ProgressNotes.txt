install solcjs
compile .sol with solcjs

install ethers
deploy contract with ethers
play with ethers.deploy args and wait for transaction receipt
deploy contract as a transaction
interact with contract

configure dotenv

encryptPrivateKey with password

sending env vars from commande line:
PRIVATE_KEY_PASSWORD=value node deploy.js

NB: clear histoy bash commandes with: history -c 


================================================
********** NODE AS SERVICE PROVIDERS: **********
================================================
Alchemy
QuickNode
Moralis
Infura
================================================

7:48:27 / 1:07:54:30

Deploy a smart contract with alchemy on rinkeby testnet

1 create and alchemy node
2 connect deploy.js to alchemy node 
PRIVATE_KEY from metamask
RPC_URL from alchemy dashboard

3 run deployment script
4 go to rinkeby etherscan => verify and publish the contract
	Add contract in contract section then publish it (specify solidity verson and stuff...)

8:06:12 / 1:07:54:30


Use typeScript with ts-node

Firt part Done âˆš
Ethrs JS
8:20:19 / 1:07:54:30


============ HARDHAT ======

install compile and deploy with HARDHAT

8:44:37 / 1:07:54:30

Add networks to hardhat config file

add networks to hardhat.config
networks:{
    rinkeby: {
      url: process.env.RINKEBEY_RPC_URL,
      accounts: [process.env.PRIVATE_KEY],
    },
}
Commande `yarn hardhat run scripts/deploy.ts --network [networkName(rinkeby in this case)]`


8:54:54 / 1:07:54:30

Use etherscan plugin to comunicate with its API
NB: should signup